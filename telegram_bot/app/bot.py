import asyncio
import json
import logging

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters.command import Command
from aiogram.types import ChatMemberUpdated, KeyboardButton, ReplyKeyboardMarkup
from nats_connector import NATSConnector

from telegram_bot.app.messages import (
    HELP_MESSAGE,
    SUBSCRIBE_SUCCESS,
    SUBSCRIBED_MESSAGE,
    UNKNOWN_COMMAND_MESSAGE,
    UNSUBSCRIBE_SUCCESS,
    UNSUBSCRIBED_MESSAGE,
    WELCOME_MESSAGE,
)
from telegram_bot.config.config_reader import config


def create_keyboard(user_telegram_id: int):
    kb_list = [
        [KeyboardButton(text="üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"), KeyboardButton(text="üìñ–û –Ω–∞—Å")],
        [KeyboardButton(text="üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="‚úÖ–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True)
    return keyboard


logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()


@dp.message(Command("start", "—Å—Ç–∞—Ä—Ç"))
@dp.message(F.text == "üìñ–û –Ω–∞—Å")
async def send_welcome(message: types.Message):
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=create_keyboard(message.from_user.id),
        parse_mode="HTML",
    )


@dp.message(Command("help"))
@dp.message(F.text == "üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def help(message: types.Message):
    await message.answer(HELP_MESSAGE, parse_mode="HTML")


@dp.message(Command("–ø–æ–¥–ø–∏—Å–∫–∞"))
@dp.message(F.text == "üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe(message: types.Message):
    await message.answer(SUBSCRIBE_SUCCESS)


@dp.message(Command("–æ—Ç–ø–∏—Å–∫–∞"))
@dp.message(F.text == "‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def unsubscribe(message: types.Message):
    await message.answer(UNSUBSCRIBE_SUCCESS)


@dp.message(Command("—Å—Ç–∞—Ç—É—Å"))
@dp.message(F.text == "‚úÖ–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
async def status(message: types.Message):
    is_subscribed = True  # –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_subscribed:
        await message.answer(SUBSCRIBED_MESSAGE)
    else:
        await message.answer(UNSUBSCRIBED_MESSAGE)


@dp.message()
async def unknown_command(message: types.Message):
    await message.answer(UNKNOWN_COMMAND_MESSAGE)


async def nats_message_handler(msg):
    try:
        data = msg.data.decode()
        payload = json.loads(data)

        telegram_id = payload.get("telegram_id")
        msg = payload.get("text")

        if not telegram_id:
            print("–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        text = (
            f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–≥–æ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è! ‚ö†Ô∏è\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {msg}\n"
        )
        await bot.send_message(chat_id=telegram_id, text=text)
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {telegram_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def main():
    nats_connector = NATSConnector(
        nats_url=config.nats_url.get_secret_value(),
        subject=config.nats_subject.get_secret_value(),
        message_handler=nats_message_handler,
    )
    await asyncio.gather(nats_connector.run(), dp.start_polling(bot))
    # await asyncio.gather(dp.start_polling(bot))


if __name__ == "__main__":
    asyncio.run(main())
